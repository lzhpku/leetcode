{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;\f1\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<vector<int>> ret;\
    vector<int> temp;\
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) \{\
        sort(candidates.begin(), candidates.end());\
        dfs(candidates, 0, target);\
        return ret;\
    \}\
    \
    void dfs(vector<int> & candidates, int start, int n) \{\
        if(n == 0) \{\
            ret.push_back(temp);\
            return;\
        \}\
        if(start >= candidates.size())\
            return;\
        for(int i = start; i < candidates.size(); i ++) \{\
            if(n < candidates[i])\
                continue;\
            if(i > start && candidates[i] == candidates[i - 1])\
                continue;\
            temp.push_back(candidates[i]);\
            dfs(candidates, i + 1, n - candidates[i]);\
            temp.pop_back();\
            //
\f1 \'d0\'a7\'b9\'fb\'ca\'c7\'d2\'bb\'d1\'f9\'b5\'c4
\f0 \
            // while(i + 1 <= candidates.size() && candidates[i] == candidates[i + 1])\
            //     i ++;\
        \}\
    \}\
\};}