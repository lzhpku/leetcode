{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    bool wordBreak(string s, unordered_set<string>& wordDict) \{\
        if(s.size() == 0 && wordDict.empty())\
            return true;\
        if(s.size() == 0 || wordDict.empty())\
            return false;\
        bool * dp = new bool [s.size() + 1];\
        for(int i = 1; i <= s.size(); i ++)\
            dp[i] = false;\
        dp[0] = true;\
        for(int i = 1; i <= s.size(); i ++) \{\
            for(int j = 0; j < i; j ++) \{\
                if(dp[j] && wordDict.find(s.substr(j, i - j)) != wordDict.end())\{\
                    dp[i] = true;\
                    break;\
                \}\
            \}\
        \}\
        return dp[s.size()];\
    \}\
\};}