{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    TreeNode* buildTree(vector<int>& inorder, vector<int>& postorder) \{\
        return build(inorder, inorder.size() - 1, 0, postorder, postorder.size() - 1);\
    \}\
    \
    TreeNode * build(vector<int>& inorder, int is, int ie, vector<int>& postorder, int p) \{\
        if(is < ie || p < 0)\
            return NULL;\
        TreeNode * root = new TreeNode(postorder[p]);\
        int index = -1;\
        for(int i = is; i >= ie; i --) \{\
            if(postorder[p] == inorder[i]) \{\
                index = i;\
                break;\
            \}\
        \}\
        root -> left = build(inorder, index - 1, ie, postorder, p - 1 - (is - index));\
        root -> right = build(inorder, is, index + 1, postorder, p - 1);\
        return root;\
    \}\
\};}