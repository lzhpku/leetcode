{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.\
\
The input string does not contain leading or trailing spaces and the words are always separated by a single space.\
\
For example,\
Given s = "the sky is blue",\
return "blue is sky the".\
\
Could you do it in-place without allocating extra space?\
\
public class Solution \{\
    public void reverseWords(char[] s) \{\
        int len = s.length;\
        reverse(s, 0, len - 1);\
        int start = 0;\
        for(int i = 0; i < len; i ++) \{\
            if(s[i] == ' ') \{\
                reverse(s, start, i - 1);\
                start = i + 1;\
            \}\
        \}\
        reverse(s, start, len - 1);\
    \}\
    \
    public void reverse(char [] s, int start, int end) \{\
        while(start < end) \{\
            s[start] = (char) (s[start] ^ s[end]);\
            s[end] = (char) (s[end] ^ s[start]);\
            s[start] = (char) (s[start] ^ s[end]);\
            start ++;\
            end --;\
        \}\
    \}\
\}}