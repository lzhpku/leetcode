{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    int res = 0;\
    int longestIncreasingPath(vector<vector<int>>& matrix) \{\
        if(matrix.size() == 0 || matrix[0].size() == 0)\
            return 0;\
        int n = matrix.size(), m = matrix[0].size();\
        vector<int> t(m, -1);\
        vector<vector<int>> dp(n, t);\
        for(int i = 0; i < n; i ++)\
            for(int j = 0; j < m; j ++)\
                dfs(matrix, dp, n, m, i, j);\
        return res;\
    \}\
    \
    int dfs(vector<vector<int>> & matrix, vector<vector<int>> & dp, int n, int m, int i, int j) \{\
        if(dp[i][j] != -1)\
            return dp[i][j];\
        int ret = 1;\
        if(i > 0 && matrix[i][j] < matrix[i - 1][j])\
            ret = max(ret, dfs(matrix, dp, n, m, i - 1, j) + 1);\
        if(j > 0 && matrix[i][j] < matrix[i][j - 1])\
            ret = max(ret, dfs(matrix, dp, n, m, i, j - 1) + 1);\
        if(i < n - 1 && matrix[i][j] < matrix[i + 1][j])\
            ret = max(ret, dfs(matrix, dp, n, m, i + 1, j) + 1);\
        if(j < m - 1 && matrix[i][j] < matrix[i][j + 1])\
            ret = max(ret, dfs(matrix, dp, n, m, i, j + 1) + 1);\
        dp[i][j] = ret;\
        res = max(res, ret);\
        return ret;\
    \}\
\};}