{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given an array of n integers nums and a target, find the number of index triplets i, j, k with 0 <= i < j < k < n that satisfy the condition nums[i] + nums[j] + nums[k] < target.\
\
For example, given nums = [-2, 0, 1, 3], and target = 2.\
\
Return 2. Because there are two triplets which sums are less than 2:\
\
[-2, 0, 1]\
[-2, 0, 3]\
\
public class Solution \{\
    public int threeSumSmaller(int[] nums, int target) \{\
        Arrays.sort(nums);\
        int len = nums.length;\
        int count = 0;\
        for(int i = 0; i < len; i ++) \{\
            int temp = target - nums[i];\
            int l = i + 1, r = len - 1;\
            while(l < r) \{\
                if(nums[l] + nums[r] < temp) \{\
                    count += r - l;\
                    l ++;\
                \}\
                else\
                    r --;\
            \}\
        \}\
        return count;\
    \}\
\}}