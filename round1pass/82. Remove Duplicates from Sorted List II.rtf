{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 	/**\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0
\cf0  * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* deleteDuplicates(ListNode* head) \{\
        if(head == NULL || head -> next == NULL)\
            return head;\
        ListNode* ret = new ListNode(0);\
        ret -> next = head;\
        ListNode * pre = ret, * slow = head, * fast = head -> next;\
        while(fast != NULL) \{\
            if(slow -> val == fast -> val) \{\
                while(fast != NULL && slow -> val == fast -> val) \{\
                    slow -> next = fast -> next;\
                    fast = slow -> next;\
                \}\
                pre -> next = slow -> next;\
                slow = pre -> next;\
                if(slow == NULL)\
                    break;\
                else\
                    fast = slow -> next;\
            \}\
            else \{\
                fast = fast -> next;\
                slow = slow -> next;\
                pre = pre -> next;\
            \}\
        \}\
        return ret -> next;\
    \}\
\};}