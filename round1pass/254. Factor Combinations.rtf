{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Numbers can be regarded as product of its factors. For example,\
\
8 = 2 x 2 x 2;\
  = 2 x 4.\
Write a function that takes an integer n and return all possible combinations of its factors.\
\
Note: \
Each combination's factors must be sorted ascending, for example: The factors of 2 and 6 is [2, 6], not [6, 2].\
You may assume that n is always positive.\
Factors should be greater than 1 and less than n.\
Examples: \
input: 1\
output: \
[]\
input: 37\
output: \
[]\
input: 12\
output:\
[\
  [2, 6],\
  [2, 2, 3],\
  [3, 4]\
]\
input: 32\
output:\
[\
  [2, 16],\
  [2, 2, 8],\
  [2, 2, 2, 4],\
  [2, 2, 2, 2, 2],\
  [2, 4, 4],\
  [4, 8]\
]\
\
public class Solution \{\
    public List<List<Integer>> getFactors(int n) \{\
        List<List<Integer>> ret = new ArrayList<List<Integer>>();\
        dfs(ret, new ArrayList<Integer>(), n, 2);\
        return ret;\
    \}\
    \
    public void dfs(List<List<Integer>> ret, List<Integer> temp, int n, int start) \{\
        if(n <= 1) \{\
            if(temp.size() > 1)\
                ret.add(new ArrayList<Integer>(temp));\
            return;\
        \}\
        for(int i = start; i <= n; i ++) \{\
            if(n % i == 0) \{\
                temp.add(i);\
                dfs(ret, temp, n / i, i);\
                temp.remove(temp.size() - 1);\
            \}\
        \}\
    \}\
\}\
}