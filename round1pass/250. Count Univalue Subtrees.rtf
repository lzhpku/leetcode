{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a binary tree, count the number of uni-value subtrees.\
\
A Uni-value subtree means all nodes of the subtree have the same value.\
\
For example:\
Given binary tree,\
              5\
             / \\\
            1   5\
           / \\   \\\
          5   5   5\
return 4.\
\
\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    \
    public int ret = 0;\
    \
    public int countUnivalSubtrees(TreeNode root) \{\
        dfs(root);\
        return ret;\
    \}\
    \
    public boolean dfs(TreeNode root) \{\
        if(root == null)\
            return true;\
        boolean flag = dfs(root.left);\
        flag = dfs(root.right) && flag;\
        if(!flag)\
            return false;\
        if(root.left != null && root.left.val != root.val)\
            return false;\
        if(root.right != null && root.right.val != root.val)\
            return false;\
        ret ++;\
        return true;\
    \}\
\}}