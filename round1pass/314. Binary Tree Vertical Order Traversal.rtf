{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a binary tree, return the vertical order traversal of its nodes' values. (ie, from top to bottom, column by column).\
\
If two nodes are in the same row and column, the order should be from left to right.\
\
Examples:\
Given binary tree [3,9,20,null,null,15,7],\
    3\
   / \\\
  9  20\
    /  \\\
   15   7\
return its vertical order traversal as:\
[\
  [9],\
  [3,15],\
  [20],\
  [7]\
]\
Given binary tree [3,9,20,4,5,2,7],\
    _3_\
   /   \\\
  9    20\
 / \\   / \\\
4   5 2   7\
return its vertical order traversal as:\
[\
  [4],\
  [9],\
  [3,5,2],\
  [20],\
  [7]\
]\
\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public List<List<Integer>> verticalOrder(TreeNode root) \{\
        List<List<Integer>> ret = new ArrayList<List<Integer>> ();\
        if(root == null)\
            return ret;\
        HashMap <Integer, ArrayList<Integer>> map = new HashMap <Integer, ArrayList<Integer>> ();\
        Queue <TreeNode> nodeQ = new LinkedList <TreeNode> ();\
        Queue <Integer> colQ = new LinkedList <Integer> ();\
        nodeQ.add(root);\
        colQ.add(0);\
        int min = 0, max = 0;\
        while(!nodeQ.isEmpty()) \{\
            TreeNode temp = nodeQ.poll();\
            int col = colQ.poll();\
            if(!map.containsKey(col))\
                map.put(col, new ArrayList<Integer>());\
            map.get(col).add(temp.val);\
            if(temp.left != null) \{\
                min = Math.min(min, col - 1);\
                nodeQ.add(temp.left);\
                colQ.add(col - 1);\
            \}\
            if(temp.right != null) \{\
                max = Math.max(max, col + 1);\
                nodeQ.add(temp.right);\
                colQ.add(col + 1);\
            \}\
        \}\
        for(int i = min; i <= max; i ++)\
            ret.add(map.get(i));\
        return ret;\
    \}\
\}}