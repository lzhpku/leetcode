{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\froman\fcharset0 Times-Roman;\f1\fnil\fcharset0 Menlo-Regular;\f2\fnil\fcharset0 HelveticaNeue;
}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red184\green14\blue61;\red247\green238\blue241;
\red255\green255\blue255;\red235\green158\blue62;\red38\green38\blue38;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa200\partightenfactor0

\f0\fs24 \cf2 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a nested list of integers, return the sum of all integers in the list weighted by their depth.\
Each element is either an integer, or a list -- whose elements may also be integers or other lists.\
\pard\pardeftab720\sl600\sa200\partightenfactor0

\b \cf2 Example 1:
\b0 \uc0\u8232 Given the list 
\f1\fs26 \cf3 \cb4 \strokec3 [[1,1],2,[1,1]]
\f0\fs24 \cf2 \cb1 \strokec2 , return 
\b 10
\b0 . (four 1's at depth 2, one 2 at depth 1)\

\b Example 2:
\b0 \uc0\u8232 Given the list 
\f1\fs26 \cf3 \cb4 \strokec3 [1,[4,[6]]]
\f0\fs24 \cf2 \cb1 \strokec2 , return 
\b 27
\b0 . (one 1 at depth 1, one 4 at depth 2, and one 6 at depth 3; 1 + 4*2 + 6*3 = 27)\
\
\pard\pardeftab720\sl360\partightenfactor0
\cf5 \cb6 \strokec5 Show Company Tags\cf2 \cb1 \strokec2 \
\cf5 \cb6 \strokec5 Show Tags\cf2 \cb1 \strokec2 \
\pard\pardeftab720\sl342\partightenfactor0

\f2 \cf7 \cb5 \strokec7 \
\
/**\
 * // This is the interface that allows for creating nested lists.\
 * // You should not implement it, or speculate about its implementation\
 * public interface NestedInteger \{\
 *\
 *     // @return true if this NestedInteger holds a single integer, rather than a nested list.\
 *     public boolean isInteger();\
 *\
 *     // @return the single integer that this NestedInteger holds, if it holds a single integer\
 *     // Return null if this NestedInteger holds a nested list\
 *     public Integer getInteger();\
 *\
 *     // @return the nested list that this NestedInteger holds, if it holds a nested list\
 *     // Return null if this NestedInteger holds a single integer\
 *     public List<NestedInteger> getList();\
 * \}\
 */\
public class Solution \{\
    public int depthSum(List<NestedInteger> nestedList) \{\
        return helper(nestedList, 1);\
    \}\
    \
    public int helper(List<NestedInteger> nestedList, int level) \{\
        int ret = 0;\
        for(int i = 0; i < nestedList.size(); i ++) \{\
            if(nestedList.get(i).isInteger())\
                ret += nestedList.get(i).getInteger() * level;\
            else\
                ret += helper(nestedList.get(i).getList(), level + 1);\
        \}\
        return ret;\
    \}\
\}}