{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<vector<int>> ret;\
    vector<int> temp;\
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) \{\
        sort(candidates.begin(), candidates.end());\
        dfs(candidates, 0, target);\
        return ret;\
    \}\
    \
    void dfs(vector<int> & candidates, int start, int n) \{\
        if(n < 0)\
            return;\
        if(n == 0) \{\
            ret.push_back(temp);\
            return;\
        \}\
        for(int i = start; i < candidates.size(); i ++) \{\
            temp.push_back(candidates[i]);\
            dfs(candidates, i, n - candidates[i]);\
            temp.pop_back();\
        \}\
    \}\
\};}