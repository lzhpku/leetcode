{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).\
\
Find all strobogrammatic numbers that are of length = n.\
\
For example,\
Given n = 2, return ["11","69","88","96"].\
\
public class Solution \{\
    public List<String> findStrobogrammatic(int n) \{\
        return helper(n, n);\
\}\
\
List<String> helper(int n, int m) \{\
    if (n == 0) return new ArrayList<String>(Arrays.asList(""));\
    if (n == 1) return new ArrayList<String>(Arrays.asList("0", "1", "8"));\
\
    List<String> list = helper(n - 2, m);\
\
    List<String> res = new ArrayList<String>();\
\
    for (int i = 0; i < list.size(); i++) \{\
        String s = list.get(i);\
\
        if (n != m) res.add("0" + s + "0");\
\
        res.add("1" + s + "1");\
        res.add("6" + s + "9");\
        res.add("8" + s + "8");\
        res.add("9" + s + "6");\
    \}\
\
    return res;\
\}\
\}}