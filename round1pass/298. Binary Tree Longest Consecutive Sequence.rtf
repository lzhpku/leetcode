{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a binary tree, find the length of the longest consecutive sequence path.\
\
The path refers to any sequence of nodes from some starting node to any node in the tree along the parent-child connections. The longest consecutive path need to be from parent to child (cannot be the reverse).\
\
For example,\
   1\
    \\\
     3\
    / \\\
   2   4\
        \\\
         5\
Longest consecutive sequence path is 3-4-5, so return 3.\
   2\
    \\\
     3\
    / \
   2    \
  / \
 1\
Longest consecutive sequence path is 2-3,not3-2-1, so return 2.\
\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    \
    public int ret = 0;\
    \
    public int longestConsecutive(TreeNode root) \{\
        if(root == null)\
            return 0;\
        dfs(root.left, root.val, 1);\
        dfs(root.right, root.val, 1);\
        return ret;\
    \}\
    \
    public void dfs(TreeNode root, int val, int len) \{\
        if(root == null) \{\
            if(len > ret)\
                ret = len;\
            return;\
        \}\
        if(root.val == val + 1)\
            len ++;\
        else \{\
            if(len > ret)\
                ret = len;\
            len = 1;\
        \}\
            \
        dfs(root.left, root.val, len);\
        dfs(root.right, root.val, len);\
    \}\
\}}