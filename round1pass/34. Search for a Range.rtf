{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<int> searchRange(vector<int>& nums, int target) \{\
        int l = 0, r = nums.size() - 1;\
        vector<int> ret;\
        while(l <= r) \{\
            int mid = (l + r) / 2;\
            if(nums[mid] > target)\
                r = mid - 1;\
            else if(nums[mid] < target)\
                l = mid + 1;\
            else \{\
                int p = mid;\
                while(p - 1 >= 0 && nums[p] == nums[p - 1])\
                    p --;\
                ret.push_back(p);\
                p = mid;\
                while(p + 1 < nums.size() && nums[p] == nums[p + 1])\
                    p ++;\
                ret.push_back(p);\
                return ret;\
            \}\
        \}\
        ret.push_back(-1);\
        ret.push_back(-1);\
        return ret;\
    \}\
\};}