{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset134 PingFangSC-Regular;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \'c7\'b0\'c1\'bd\'b8\'f6\'ce\'aa\'c9\'b6\'b3\'ac\'ca\'b1\'a3\'bf
\f1 \
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) \{\
        if(intervals.empty()) \{\
    		intervals.push_back(newInterval);\
    		return intervals;\
    	\}\
    	vector<Interval> :: iterator it = intervals.begin();\
    	while(it != intervals.end() && (*it).end < newInterval.start)\
            it ++;\
        while(it != intervals.end() && (*it).start <= newInterval.end) \{\
            newInterval.start = min((*it).start, newInterval.start);\
            newInterval.end = max((*it).end, newInterval.end);\
            it = intervals.erase(it);\
        \}\
    	intervals.insert(it, newInterval);\
    	return intervals;\
    \}\
\};\
\
\
\
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) \{\
        int i = 0;\
        if(i < intervals.size()) \{\
            while(i < intervals.size() && intervals[i].end < newInterval.start)\
                i ++;\
            while(i < intervals.size() && intervals[i].start <= newInterval.end) \{\
                newInterval.start = (newInterval.start <= intervals[i].start ? newInterval.start : intervals[i].start);\
                newInterval.end = (newInterval.end >= intervals[i].end ? newInterval.end : intervals[i].end);\
                intervals.erase(intervals.begin() + i);\
            \}\
        \}\
        intervals.insert(intervals.begin() + i, newInterval);\
        return intervals;\
    \}\
\};\
\
\
\
\
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    vector<Interval> insert(vector<Interval>& intervals, Interval newInterval) \{\
        vector<Interval> ret;\
    auto it = intervals.begin();\
    for(; it!=intervals.end(); ++it)\{\
        if(newInterval.end < (*it).start) //all intervals after will not overlap with the newInterval\
            break; \
        else if(newInterval.start > (*it).end) //*it will not overlap with the newInterval\
            ret.push_back(*it); \
        else\{ //update newInterval bacause *it overlap with the newInterval\
            newInterval.start = min(newInterval.start, (*it).start);\
            newInterval.end = max(newInterval.end, (*it).end);\
        \}   \
    \}\
    // don't forget the rest of the intervals and the newInterval\
    ret.push_back(newInterval);\
    for(; it!=intervals.end(); ++it)\
        ret.push_back(*it);\
    return ret;\
    \}\
\};}