{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* sortList(ListNode* head) \{\
        if(head == NULL || head -> next == NULL)\
            return head;\
        ListNode* slow = head;\
        ListNode* fast = head;\
        ListNode* pre = NULL;\
        while(fast != NULL && fast -> next != NULL) \{\
            pre = slow;\
            slow = slow -> next;\
            fast = fast -> next -> next;\
        \}\
        pre -> next = NULL;\
        slow = sortList(slow);\
        head = sortList(head);\
        return merge(head, slow);\
    \}\
    \
    ListNode* merge(ListNode * l1, ListNode * l2) \{\
        ListNode* ret = new ListNode(0);\
        ListNode* cur = ret;\
        while(l1 != NULL && l2 != NULL) \{\
            if(l1 -> val <= l2 -> val) \{\
                cur -> next = l1;\
                l1 = l1 -> next;\
            \}\
            else \{\
                cur -> next = l2;\
                l2 = l2 -> next;\
            \}\
            cur = cur -> next;\
        \}\
        if(l1 != NULL)\
            cur -> next = l1;\
        if(l2 != NULL)\
            cur -> next = l2;\
        return ret -> next;\
    \}\
\};\
 }