{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* temp;\
    bool flag;\
\
    void reorderList(ListNode* head) \{\
        if(head == NULL)\
            return;\
        temp = head;\
        flag = false;\
        reverse(head);\
        return;\
    \}\
    \
    void reverse(ListNode* head) \{\
        if(head == NULL)\
            return;\
        reverse(head -> next);\
        if(flag)\
            return;\
        if(temp == head || temp -> next == head) \{\
            head -> next = NULL;\
            flag = true;\
            return;\
        \}\
        head -> next = temp -> next;\
        temp -> next = head;\
        temp = temp -> next -> next;\
        return;\
    \}\
\};\
\
\
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    void reorderList(ListNode* head) \{\
        if(head == NULL || head -> next == NULL)\
            return;\
        ListNode* slow = head, *fast = head;\
        while(fast != NULL && fast -> next != NULL) \{\
            slow = slow -> next;\
            fast = fast -> next -> next;\
        \}\
        ListNode* temp = slow -> next;\
        slow -> next = NULL;\
        slow = reverseLink(temp);\
        head = merge(head, slow);\
    \}\
    \
    ListNode* reverseLink(ListNode* head) \{\
        ListNode* pre = NULL, *cur = head, *suc = NULL;\
        while(cur != NULL) \{\
            suc = cur -> next;\
            cur -> next = pre;\
            pre = cur;\
            cur = suc;\
        \}\
        return pre;\
    \}\
    \
    ListNode* merge(ListNode* l1, ListNode* l2) \{\
        ListNode* ret = l1;\
        while(l2 != NULL) \{\
            ListNode* tl1 = l1 -> next;\
            ListNode* tl2 = l2 -> next;\
            l1 -> next = l2;\
            l2 -> next = tl1;\
            l1 = tl1;\
            l2 = tl2;\
        \}\
        return ret;\
    \}\
\};}