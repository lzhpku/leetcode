{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red184\green14\blue61;
\red247\green238\blue241;\red242\green242\blue242;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa200\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a binary tree where all the right nodes are either leaf nodes with a sibling (a left node that shares the same parent node) or empty, flip it upside down and turn it into a tree where the original right nodes turned into left leaf nodes. Return the new root.\
\pard\pardeftab720\sl600\partightenfactor0
\cf2 For example:\
Given a binary tree 
\f1\fs26 \cf4 \cb5 \strokec4 \{1,2,3,4,5\}
\f0\fs28 \cf2 \cb3 \strokec2 ,\
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs26 \cf2 \cb6     1\
   / \\\
  2   3\
 / \\\
4   5\
\pard\pardeftab720\sl600\sa200\partightenfactor0

\f0\fs28 \cf2 \cb3 \
return the root of the binary tree 
\f1\fs26 \cf4 \cb5 \strokec4 [4,5,2,#,#,3,1]
\f0\fs28 \cf2 \cb3 \strokec2 .\cb1 \uc0\u8232 \cb3 \
\pard\pardeftab720\sl360\partightenfactor0

\f1\fs26 \cf2 \cb6    4\
  / \\\
 5   2\
    / \\\
   3   1  \
\
/**\
 * Definition for a binary tree node.\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
public class Solution \{\
    public TreeNode upsideDownBinaryTree(TreeNode root) \{\
        if(root == null || root.left == null)\
            return root;\
        TreeNode newRoot = upsideDownBinaryTree(root.left);\
        root.left.left = root.right;\
        root.left.right = root;\
        root.left = null;\
        root.right = null;\
        return newRoot;\
    \}\
\}}