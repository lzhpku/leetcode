{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 The API: int read4(char *buf) reads 4 characters at a time from a file.\
\
The return value is the actual number of characters read. For example, it returns 3 if there is only 3 characters left in the file.\
\
By using the read4 API, implement the function int read(char *buf, int n) that reads n characters from the file.\
\
Note:\
The read function will only be called once for each test case.\
\
\
/* The read4 API is defined in the parent class Reader4.\
      int read4(char[] buf); */\
\
public class Solution extends Reader4 \{\
    /**\
     * @param buf Destination buffer\
     * @param n   Maximum number of characters to read\
     * @return    The number of characters read\
     */\
    public int read(char[] buf, int n) \{\
        char[] buffer = new char[4];\
        boolean endOfFile = false;\
        int readBytes = 0;\
\
        while (readBytes < n && !endOfFile) \{\
            int currReadBytes = read4(buffer);\
            if (currReadBytes !=4) \{\
                endOfFile = true;\
            \}\
            int length = Math.min(n - readBytes, currReadBytes);\
            for (int i=0; i<length; i++) \{\
                buf[readBytes + i] = buffer[i];\
            \}\
            readBytes += length;\
        \}\
        return readBytes;\
    \}\
\}\
\
}