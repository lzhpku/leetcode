{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a string, we can "shift" each of its letter to its successive letter, for example: "abc" -> "bcd". We can keep "shifting" which forms the sequence:\
\
"abc" -> "bcd" -> ... -> "xyz"\
Given a list of strings which contains only lowercase alphabets, group all strings that belong to the same shifting sequence.\
\
For example, given: ["abc", "bcd", "acef", "xyz", "az", "ba", "a", "z"], \
Return:\
\
[\
  ["abc","bcd","xyz"],\
  ["az","ba"],\
  ["acef"],\
  ["a","z"]\
]\
\
\
class Solution \{\
public:\
    vector<vector<string>> groupStrings(vector<string>& strings) \{\
        vector<vector<string>> ret;\
        map<string, multiset<string>> hash;\
        for(auto str : strings) \{\
            string key = "";\
            for(int i = 1; i < str.size(); i ++) \
                key = key + " " + to_string('0' + ((str[i] - str[i - 1] + 26) % 26));\
            hash[key].insert(str);\
        \}\
        for(auto iter : hash) \{\
            vector<string> temp(iter.second.begin(), iter.second.end());\
            ret.push_back(temp);\
        \}\
        return ret;\
    \}\
\};}