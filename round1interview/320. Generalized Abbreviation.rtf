{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Write a function to generate the generalized abbreviations of a word.\
\
Example:\
Given word = "word", return the following list (order does not matter):\
["word", "1ord", "w1rd", "wo1d", "wor1", "2rd", "w2d", "wo2", "1o1d", "1or1", "w1r1", "1o2", "2r1", "3d", "w3", "4"]\
\
public class Solution \{\
    public List<String> generateAbbreviations(String word) \{\
        ArrayList<String> ret = new ArrayList<String> ();\
        dfs(ret, word, "", 0, 0);\
        return ret;\
    \}\
    \
    public void dfs(ArrayList<String> ret, String word, String temp, int pos, int count) \{\
        if(pos >= word.length()) \{\
            if(count > 0)\
                temp += count;\
            ret.add(temp);\
            return;\
        \}\
        dfs(ret, word, temp, pos + 1, count + 1);\
        dfs(ret, word, temp + (count > 0 ? count : "") + word.charAt(pos), pos + 1, 0);\
    \}\
\}}