{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a non-empty binary search tree and a target value, find the value in the BST that is closest to the target.\
\
Note:\
Given target value is a floating point.\
You are guaranteed to have only one unique value in the BST that is closest to the target.\
\
/**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    int closestValue(TreeNode* root, double target) \{\
        int a = root -> val;\
        auto kid = target < a ? root -> left : root -> right;\
        if(kid == NULL)\
            return a;\
        int b = closestValue(kid, target);\
        return abs(a - target) < abs(b - target) ? a : b;\
    \}\
\};}