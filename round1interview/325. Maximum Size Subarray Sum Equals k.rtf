{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given an array nums and a target value k, find the maximum length of a subarray that sums to k. If there isn't one, return 0 instead.\
\
Example 1:\
Given nums = [1, -1, 5, -2, 3], k = 3,\
return 4. (because the subarray [1, -1, 5, -2] sums to 3 and is the longest)\
\
Example 2:\
Given nums = [-2, -1, 2, 1], k = 1,\
return 2. (because the subarray [-1, 2] sums to 1 and is the longest)\
\
Follow Up:\
Can you do it in O(n) time?\
\
\
class Solution \{\
public:\
    int maxSubArrayLen(vector<int>& nums, int k) \{\
        int ret = 0, sum = 0;\
        map<int, int> hash;\
        for(int i = 0; i < nums.size(); i ++) \{\
            sum += nums[i];\
            if(sum == k)\
                ret = i + 1;\
            else if(hash.find(sum - k) != hash.end())\
                ret = max(ret, i - hash[sum - k]);\
            if(hash.find(sum) == hash.end())\
                hash[sum] = i;\
        \}\
        return ret;\
    \}\
\};}