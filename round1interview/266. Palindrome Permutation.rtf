{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given a string, determine if a permutation of the string could form a palindrome.\
\
For example,\
"code" -> False, "aab" -> True, "carerac" -> True.\
\
class Solution \{\
public:\
    bool canPermutePalindrome(string s) \{\
        set<char> hash;\
        for(int i = 0; i < s.size(); i ++) \{\
            if(hash.find(s[i]) != hash.end())\
                hash.erase(s[i]);\
            else\
                hash.insert(s[i]);\
        \}\
        return hash.size() < 2;\
    \}\
\};}