{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given an array of meeting time intervals consisting of start and end times [[s1,e1],[s2,e2],...] (si < ei), determine if a person could attend all meetings.\
\
For example,\
Given [[0, 30],[5, 10],[15, 20]],\
return false.\
\
/**\
 * Definition for an interval.\
 * struct Interval \{\
 *     int start;\
 *     int end;\
 *     Interval() : start(0), end(0) \{\}\
 *     Interval(int s, int e) : start(s), end(e) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    bool canAttendMeetings(vector<Interval>& intervals) \{\
        if(intervals.size() < 2)\
            return true;\
        sort(intervals.begin(), intervals.end(), cmp);\
        for(int i = 0; i < intervals.size() - 1; i ++) \{\
            if(intervals[i].end > intervals[i + 1].start)\
                return false;\
        \}\
        return true;\
    \}\
    \
    static bool cmp(Interval a, Interval b) \{\
        return a.start < b.start;\
    \}\
\};}