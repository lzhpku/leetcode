{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Given n nodes labeled from 0 to n - 1 and a list of undirected edges (each edge is a pair of nodes), write a function to check whether these edges make up a valid tree.\
\
For example:\
\
Given n = 5 and edges = [[0, 1], [0, 2], [0, 3], [1, 4]], return true.\
\
Given n = 5 and edges = [[0, 1], [1, 2], [2, 3], [1, 3], [1, 4]], return false.\
\
public class Solution \{\
    public boolean validTree(int n, int[][] edges) \{\
        // initialize n isolated islands\
        int[] nums = new int[n];\
        Arrays.fill(nums, -1);\
\
        // perform union find\
        for (int i = 0; i < edges.length; i++) \{\
            int x = find(nums, edges[i][0]);\
            int y = find(nums, edges[i][1]);\
\
            // if two vertices happen to be in the same set\
            // then there's a cycle\
            if (x == y) return false;\
\
            // union\
            nums[x] = y;\
        \}\
\
        return edges.length == n - 1;\
    \}\
\
    int find(int nums[], int i) \{\
        if (nums[i] == -1) return i;\
        return find(nums, nums[i]);\
    \}\
\}}