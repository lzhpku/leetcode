{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    vector<vector<int>> fourSum(vector<int>& nums, int target) \{\
        vector<vector<int>> ret;\
        int len = nums.size();\
        if(len < 1)\
            return ret;\
        sort(nums.begin(), nums.end());\
        for(int i = 0; i < len; i ++) \{\
            int target3 = target - nums[i];\
            for(int j = i + 1; j < len; j ++) \{\
                int target2 = target3 - nums[j];\
                int left = j + 1, right = len - 1;\
                while(left < right) \{\
                    int temp = nums[left] + nums[right];\
                    if(temp < target2)\
                        left ++;\
                    else if(temp > target2)\
                        right --;\
                    else \{\
                        vector<int> quadruplet(4, 0);\
                        quadruplet[0] = nums[i];\
                        quadruplet[1] = nums[j];\
                        quadruplet[2] = nums[left];\
                        quadruplet[3] = nums[right];\
                        ret.push_back(quadruplet);\
                        while(left < right && quadruplet[2] == nums[left])\
                            left ++;\
                        while(left < right && quadruplet[3] == nums[right])\
                            right --;\
                    \}\
                \}\
                while(j + 1 < len && nums[j] == nums[j + 1])\
                    j ++;\
            \}\
            while(i + 1 < len && nums[i] == nums[i + 1])\
                i ++;\
        \}\
        return ret;\
    \}\
\};}