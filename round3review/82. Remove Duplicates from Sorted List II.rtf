{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red184\green14\blue61;
\red247\green238\blue241;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa200\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a sorted linked list, delete all nodes that have duplicate numbers, leaving only 
\i distinct
\i0  numbers from the original list.\
For example,\cb1 \uc0\u8232 \cb3 Given 
\f1\fs26 \cf4 \cb5 \strokec4 1->2->3->3->4->4->5
\f0\fs28 \cf2 \cb3 \strokec2 , return 
\f1\fs26 \cf4 \cb5 \strokec4 1->2->5
\f0\fs28 \cf2 \cb3 \strokec2 .\cb1 \uc0\u8232 \cb3 Given 
\f1\fs26 \cf4 \cb5 \strokec4 1->1->1->2->3
\f0\fs28 \cf2 \cb3 \strokec2 , return 
\f1\fs26 \cf4 \cb5 \strokec4 2->3
\f0\fs28 \cf2 \cb3 \strokec2 .\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* deleteDuplicates(ListNode* head) \{\
        if(head == NULL || head -> next == NULL)\
            return head;\
        ListNode* temp = new ListNode(0);\
        temp -> next = head;\
        ListNode* prepre = temp, * pre = head, * cur = head -> next;\
        while(cur != NULL) \{\
            if(cur != NULL && cur -> val == pre -> val) \{\
                while(cur != NULL && cur -> val == pre -> val) \{\
                    pre -> next = cur -> next;\
                    cur = cur -> next;\
                \}\
                prepre -> next = pre -> next;\
                pre = prepre -> next;\
                if(cur == NULL)\
                    break;\
                else\
                    cur = pre -> next;\
            \}\
            else \{\
                prepre = prepre -> next;\
                pre = pre -> next;\
                cur = cur -> next;\
            \}\
        \}\
        return temp -> next;\
    \}\
\};}