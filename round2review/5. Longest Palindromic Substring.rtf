{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    string longestPalindrome(string s) \{\
        string ret = "";\
        for(int i = 0; i < s.size(); i ++) \{\
            int j = 0;\
            while(i + j < s.size() && i - j >= 0 && s[i + j] == s[i - j])\
                j ++;\
            if(2 * j - 1 > ret.size())\
                ret = s.substr(i - j + 1, 2 * j - 1);\
            j = 1;\
            while(i - j + 1 >= 0 && i + j < s.size() && s[i - j + 1] == s[i + j])\
                j ++;\
            if(2 * j - 2 > ret.size())\
                ret = s.substr(i - j + 2, 2 * j - 2);\
        \}\
        return ret;\
    \}\
\};}