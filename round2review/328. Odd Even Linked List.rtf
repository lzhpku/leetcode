{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf470
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;\f1\fnil\fcharset0 Menlo-Regular;\f2\fswiss\fcharset0 Helvetica;
\f3\fnil\fcharset134 PingFangSC-Regular;}
{\colortbl;\red255\green255\blue255;\red38\green38\blue38;\red255\green255\blue255;\red184\green14\blue61;
\red247\green238\blue241;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\sl600\sa200\partightenfactor0

\f0\fs28 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 Given a singly linked list, group all odd nodes together followed by the even nodes. Please note here we are talking about the node number and not the value in the nodes.\
You should try to do it in place. The program should run in O(1) space complexity and O(nodes) time complexity.\
\

\b Example:
\b0 \cb1 \uc0\u8232 \cb3 Given 
\f1\fs26 \cf4 \cb5 \strokec4 1->2->3->4->5->NULL
\f0\fs28 \cf2 \cb3 \strokec2 ,\cb1 \uc0\u8232 \cb3 return 
\f1\fs26 \cf4 \cb5 \strokec4 1->3->5->2->4->NULL
\f0\fs28 \cf2 \cb3 \strokec2 .\

\b Note:
\b0 \cb1 \uc0\u8232 \cb3 The relative order inside both the even and odd groups should remain as it was in the input. \cb1 \uc0\u8232 \cb3 The first node is considered odd, the second node even and so on ...\
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f2\fs24 \cf0 \cb1 \kerning1\expnd0\expndtw0 \outl0\strokewidth0 \
\
\
/**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode* oddEvenList(ListNode* head) \{\
        ListNode* odd = new ListNode(0), * o = odd;\
        ListNode* even = new ListNode(0), * e = even;\
        while(head != NULL && head -> next != NULL) \{\
            o -> next = head;\
            o = o -> next;\
            head = head -> next;\
            e -> next = head;\
            e = e -> next;\
            head = head -> next;\
        \}\
        if(head != NULL) \{\
            o -> next = head;\
            o = o -> next;\
        \}\
        e -> next = NULL;//
\f3 \'b7\'c7\'b3\'a3\'d6\'d8\'d2\'aa
\f2 \
        o -> next = even -> next;\
        return odd -> next;\
    \}\
\};}