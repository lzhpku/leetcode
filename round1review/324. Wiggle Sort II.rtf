{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 class Solution \{\
public:\
    void wiggleSort(vector<int>& nums) \{\
        if(nums.empty())\
            return;\
        int n = nums.size();\
\
        // Step 1: Find the median          \
        vector<int>::iterator nth = next(nums.begin(), n / 2);\
        nth_element(nums.begin(), nth, nums.end());\
        int median = *nth;\
\
        // Step 2: Tripartie partition within O(n)-time & O(1)-space.           \
        auto m = [n](int idx) \{ return (2 * idx + 1) % (n | 1); \};          \
        int first = 0, mid = 0, last = n - 1;\
        while (mid <= last) \{\
            if (nums[m(mid)] > median) \{\
                swap(nums[m(first)], nums[m(mid)]);\
                ++first;\
                ++mid;\
            \}\
            else if (nums[m(mid)] < median) \{\
                swap(nums[m(mid)], nums[m(last)]);\
                --last;\
            \}               \
            else \{\
                ++mid;\
            \}\
        \}\
    \}\
\};}