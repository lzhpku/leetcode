{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    vector<TreeNode*> generateTrees(int n) \{\
        vector<TreeNode*> r;\
        if(n == 0)\
            return r;\
        return generate(1, n);\
    \}\
    \
    vector<TreeNode*> generate(int s, int e) \{\
        vector<TreeNode*> ret;\
        if(s > e) \{\
            ret.push_back(NULL);\
            return ret;\
        \}\
        for(int i = s; i <= e; i ++) \{\
            vector<TreeNode*> left = generate(s, i - 1);\
            vector<TreeNode*> right = generate(i + 1, e);\
            for(int j = 0; j < left.size(); j ++) \{\
                for(int k = 0; k < right.size(); k ++) \{\
                    TreeNode * root = new TreeNode(i);\
                    root -> left = left[j];\
                    root -> right = right[k];\
                    ret.push_back(root);\
                \}\
            \}\
        \}\
        return ret;\
    \}\
\};}