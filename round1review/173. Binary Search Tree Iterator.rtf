{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for binary tree\
 * public class TreeNode \{\
 *     int val;\
 *     TreeNode left;\
 *     TreeNode right;\
 *     TreeNode(int x) \{ val = x; \}\
 * \}\
 */\
\
public class BSTIterator \{\
    Stack <TreeNode> stack = new Stack <TreeNode> ();\
    public BSTIterator(TreeNode root) \{\
        setNext(root);\
    \}\
\
    /** @return whether we have a next smallest number */\
    public boolean hasNext() \{\
        return !stack.isEmpty();\
    \}\
\
    /** @return the next smallest number */\
    public int next() \{\
        if(stack.isEmpty())\
            return -1;\
        TreeNode node = stack.pop();\
        int ret = node.val;\
        node = node.right;\
        while(node != null)\{\
            stack.push(node);\
            node = node.left;\
        \}\
        return ret;\
    \}\
    \
    public void setNext(TreeNode t) \{\
        while(t != null) \{\
            stack.push(t);\
            t = t.left;\
        \}\
    \}\
\}\
\
/**\
 * Your BSTIterator will be called like this:\
 * BSTIterator i = new BSTIterator(root);\
 * while (i.hasNext()) v[f()] = i.next();\
 */}