{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for singly-linked list.\
 * struct ListNode \{\
 *     int val;\
 *     ListNode *next;\
 *     ListNode(int x) : val(x), next(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) \{\
        ListNode * l1 = headA, * l2 = headB;\
        int len1 = 0, len2 = 0;\
        while(l1 != NULL)\
        \{\
            len1 ++;\
            l1 = l1 -> next;\
        \}\
        l1 = headA;\
        while(l2 != NULL)\
        \{\
            len2 ++;\
            l2 = l2 -> next;\
        \}\
        l2 = headB;\
        if(len1 >= len2)\
            for(int i = 0; i < len1 - len2; i ++)\
                l1 = l1 -> next;\
        else\
            for(int i = 0; i < len2 - len1; i ++)\
                l2 = l2 -> next;\
        while(l1 != NULL && l2 != NULL && l1 != l2)\
        \{\
            l1 = l1 -> next;\
            l2 = l2 -> next;\
        \}\
        return l1;\
    \}\
\};}