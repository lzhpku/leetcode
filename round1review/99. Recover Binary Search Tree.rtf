{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Solution \{\
public:\
    TreeNode * first = NULL, * second = NULL, * pre = new TreeNode(INT_MIN);\
\
    void recoverTree(TreeNode* root) \{\
        trav(root);\
        int temp = first -> val;\
        first -> val = second -> val;\
        second -> val = temp;\
    \}\
    \
    void trav(TreeNode * root) \{\
        if(root == NULL)\
            return;\
        trav(root -> left);\
        if(first == NULL && pre -> val >= root -> val) \
            first = pre;\
        if(first != NULL && pre -> val >= root -> val)\
            second = root;\
        pre = root;\
        trav(root -> right);\
    \}\
\};}