{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public class Solution \{\
    public boolean isValidSudoku(char[][] board) \{\
        HashSet <String> hs = new HashSet <String> ();\
        for(int i = 0; i < board.length; i ++) \{\
            for(int j = 0; j < board[i].length; j ++) \{\
                if(board[i][j] == '.')\
                    continue;\
                String s = i + "H" + board[i][j];\
                if(hs.contains(s))\
                    return false;\
                else\
                    hs.add(s);\
                s = j + "L" + board[i][j];\
                if(hs.contains(s))\
                    return false;\
                else\
                    hs.add(s);\
                s = (i / 3) + "K" + (j / 3) + "K" + board[i][j];\
                if(hs.contains(s))\
                    return false;\
                else\
                    hs.add(s);\
            \}\
        \}\
        return true;\
    \}\
\}}