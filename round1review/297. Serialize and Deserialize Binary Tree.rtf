{\rtf1\ansi\ansicpg936\cocoartf1404\cocoasubrtf340
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /**\
 * Definition for a binary tree node.\
 * struct TreeNode \{\
 *     int val;\
 *     TreeNode *left;\
 *     TreeNode *right;\
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) \{\}\
 * \};\
 */\
class Codec \{\
public:\
    int index;\
    // Encodes a tree to a single string.\
    string serialize(TreeNode* root) \{\
       return dfs(root); \
    \}\
    \
    string dfs(TreeNode* root) \{\
        if(root == NULL)\
            return "NULL ";\
        return to_string(root -> val) + " " + dfs(root -> left) + dfs(root -> right);\
    \}\
\
    // Decodes your encoded data to tree.\
    TreeNode* deserialize(string data) \{\
        vector<string> d;\
        split(data, " ", d);\
        index = 0;\
        return dfs(d, index);\
    \}\
\
    TreeNode* dfs(vector<string>& d, int i) \{\
        if(d[i] == "NULL") \{\
            index ++;\
            return NULL;\
        \}\
        TreeNode* temp = new TreeNode(atoi(d[index].c_str()));\
        index ++;\
        temp -> left = dfs(d, index);\
        temp -> right = dfs(d, index);\
        return temp;\
    \}\
    \
    void split(const string& src, const string& separator, vector<string>& dest)\
    \{\
        string str = src;\
        string substring;\
        string::size_type start = 0, index;\
    \
        do\
        \{\
            index = str.find_first_of(separator,start);\
            if (index != string::npos)\
            \{    \
                substring = str.substr(start,index-start);\
                dest.push_back(substring);\
                start = str.find_first_not_of(separator,index);\
                if (start == string::npos) return;\
            \}\
        \}while(index != string::npos);\
        \
        //the last token\
        substring = str.substr(start);\
        dest.push_back(substring);\
    \}\
\};\
\
// Your Codec object will be instantiated and called as such:\
// Codec codec;\
// codec.deserialize(codec.serialize(root));}